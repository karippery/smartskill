{
	"info": {
		"_postman_id": "2eca55bc-9480-4599-8b3f-0a85e98f6213",
		"name": "smartskill",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3233866",
		"_collection_link": "https://dark-sunset-772263.postman.co/workspace/My-Workspace~a1fb90d1-a56e-487d-801b-cbb4db52d3bd/collection/3233866-2eca55bc-9480-4599-8b3f-0a85e98f6213?action=share&source=collection_link&creator=3233866"
	},
	"item": [
		{
			"name": "user",
			"item": [
				{
					"name": "forgot_password",
					"item": [
						{
							"name": "password-reset",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"john.karippery@yahoo.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{LOCAL_URL}}users/password-reset/",
									"host": [
										"{{LOCAL_URL}}users"
									],
									"path": [
										"password-reset",
										""
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is within an acceptable range\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.results).to.be.an('array').that.is.not.empty;\r",
									"\r",
									"    const requiredFields = [\"id\", \"email\", \"first_name\", \"last_name\", \"is_verified\", \"is_staff\", \"is_superuser\", \"created_date\", \"updated_date\"];\r",
									"\r",
									"    responseData.results.forEach(function (result) {\r",
									"        requiredFields.forEach(function (field) {\r",
									"            pm.expect(result).to.have.property(field);\r",
									"        });\r",
									"    });\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Id is a non-negative integer\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.results).to.be.an('array');\r",
									"    responseData.results.forEach(function(user) {\r",
									"        pm.expect(user.id).to.be.a('number');\r",
									"        pm.expect(user.id).to.be.at.least(0, \"Id should be a non-negative integer\");\r",
									"    });\r",
									"});\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.results).to.be.an('array');\r",
									"    responseData.results.forEach(function(user) {\r",
									"        pm.expect(user.email).to.be.a('string');\r",
									"        pm.expect(user.email).to.match(/\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/, \"Email should be in a valid format\");\r",
									"    });\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{LOCAL_URL}}users/",
							"host": [
								"{{LOCAL_URL}}users"
							],
							"path": [
								""
							]
						},
						"description": "The endpoint retrieves a list of users. The response is in JSON format and follows the schema below:\n\n``` json\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"links\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"next\": {\n                    \"type\": [\"string\", \"null\"]\n                },\n                \"previous\": {\n                    \"type\": [\"string\", \"null\"]\n                },\n                \"current\": {\n                    \"type\": \"integer\"\n                }\n            }\n        },\n        \"total_items\": {\n            \"type\": \"integer\"\n        },\n        \"total_pages\": {\n            \"type\": \"integer\"\n        },\n        \"results\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"id\": {\n                        \"type\": \"integer\"\n                    },\n                    \"last_login\": {\n                        \"type\": [\"string\", \"null\"]\n                    },\n                    \"email\": {\n                        \"type\": \"string\"\n                    },\n                    \"first_name\": {\n                        \"type\": \"string\"\n                    },\n                    \"last_name\": {\n                        \"type\": \"string\"\n                    },\n                    \"title\": {\n                        \"type\": [\"string\", \"null\"]\n                    },\n                    \"location\": {\n                        \"type\": [\"string\", \"null\"]\n                    },\n                    \"is_verified\": {\n                        \"type\": \"boolean\"\n                    },\n                    \"is_staff\": {\n                        \"type\": \"boolean\"\n                    },\n                    \"is_superuser\": {\n                        \"type\": \"boolean\"\n                    },\n                    \"created_date\": {\n                        \"type\": \"string\"\n                    },\n                    \"updated_date\": {\n                        \"type\": \"string\"\n                    }\n                }\n            }\n        }\n    }\n}\n\n ```"
					},
					"response": []
				},
				{
					"name": "User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(201);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the required fields\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('last_login');\r",
									"    pm.expect(responseData).to.have.property('email');\r",
									"    pm.expect(responseData).to.have.property('first_name');\r",
									"    pm.expect(responseData).to.have.property('last_name');\r",
									"    pm.expect(responseData).to.have.property('title');\r",
									"    pm.expect(responseData).to.have.property('location');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Email is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData.email).to.be.a('string').and.to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"654321\",\r\n  \"email\": \"john@john.com\",\r\n  \"first_name\": \"john\",\r\n  \"last_name\": \"john\",\r\n  \"sex\": \"male\",\r\n  \"title\": \"Mr\",\r\n  \"location\": \"Braunschweig\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{LOCAL_URL}}users/",
							"host": [
								"{{LOCAL_URL}}users"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "user",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{LOCAL_URL}}users/2/",
							"host": [
								"{{LOCAL_URL}}users"
							],
							"path": [
								"2",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "random_users",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"password\": \"11223344\",\r\n  \"email\": \"{{$randomEmail}}\",\r\n  \"first_name\": \"{{$randomFirstName}}\",\r\n  \"last_name\": \"{{$randomLastName}}\",\r\n  \"sex\": \"male\",\r\n  \"title\": \"{{$randomNamePrefix}}\",\r\n  \"location\": \"{{$randomCity}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{LOCAL_URL}}users/",
							"host": [
								"{{LOCAL_URL}}users"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "skills",
			"item": [
				{
					"name": "skill",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{LOCAL_URL}}skills/",
							"host": [
								"{{LOCAL_URL}}skills"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "skill",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const programmingLanguages = [\r",
									"    \"JavaScript\",\r",
									"    \"Python\",\r",
									"    \"Java\",\r",
									"    \"C++\",\r",
									"    \"Ruby\",\r",
									"    \"Go\",\r",
									"    \"Swift\",\r",
									"    \"Kotlin\",\r",
									"    \"PHP\",\r",
									"    \"TypeScript\"\r",
									"];\r",
									"\r",
									"function getRandomProgrammingLanguage() {\r",
									"    const randomIndex = Math.floor(Math.random() * programmingLanguages.length);\r",
									"    return programmingLanguages[randomIndex];\r",
									"}\r",
									"\r",
									"const randomLanguage = getRandomProgrammingLanguage();\r",
									"\r",
									"// Set the random language as an environment variable\r",
									"pm.collectionVariables.set(\"randomLanguage\", randomLanguage);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"category_id\": 2,\r\n  \"name\": \"{{randomLanguage}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{LOCAL_URL}}skills/",
							"host": [
								"{{LOCAL_URL}}skills"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "userskills",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": 2,\r\n  \"skill_id\": 1,\r\n  \"level\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{LOCAL_URL}}skills/user-skills/",
							"host": [
								"{{LOCAL_URL}}skills"
							],
							"path": [
								"user-skills",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "userskills",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{LOCAL_URL}}skills/user-skills/",
							"host": [
								"{{LOCAL_URL}}skills"
							],
							"path": [
								"user-skills",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "skill_category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const skill_categories = [\r",
									"  \"Programming Languages\",\r",
									"  \"Database Management\",\r",
									"  \"Data Structures and Algorithms\",\r",
									"  \"Source Control\",\r",
									"  \"Testing and Debugging\",\r",
									"  \"Software Development Methodologies\",\r",
									"  \"Cloud Computing\",\r",
									"  \"DevOps\",\r",
									"  \"Front-End Development\",\r",
									"  \"Back-End Development\",\r",
									"  \"Cybersecurity\",\r",
									"  \"Soft Skills\"\r",
									"];\r",
									"\r",
									"function getRandomcategories() {\r",
									"    const randomIndex = Math.floor(Math.random() * skill_categories.length);\r",
									"    return skill_categories[randomIndex];\r",
									"}\r",
									"\r",
									"const randomCategories = getRandomcategories();\r",
									"\r",
									"// Set the random language as an environment variable\r",
									"pm.collectionVariables.set(\"randomCategories\", randomCategories);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{randomCategories}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://127.0.0.1:8090/skills-categories/",
							"protocol": "http",
							"host": [
								"127",
								"0",
								"0",
								"1"
							],
							"port": "8090",
							"path": [
								"skills-categories",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "skill_category",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"Programming languages\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{LOCAL_URL}}skills/skills-categories/",
							"host": [
								"{{LOCAL_URL}}skills"
							],
							"path": [
								"skills-categories",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "skills by user_id",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{LOCAL_URL}}skills/user-skills/?user_id=1",
							"host": [
								"{{LOCAL_URL}}skills"
							],
							"path": [
								"user-skills",
								""
							],
							"query": [
								{
									"key": "user_id",
									"value": "1"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "experiences",
			"item": [
				{
					"name": "experiences",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{LOCAL_URL}}experiences/",
							"host": [
								"{{LOCAL_URL}}experiences"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "experiences",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"user_id\": 2,\r\n  \"job_title\": \"Backend Developer\",\r\n  \"company_name\": \"Google\",\r\n  \"start_date\": \"2022-02-24\",\r\n  \"end_date\": \"2024-08-24\",\r\n  \"is_current\": true,\r\n  \"description\": \"string\",\r\n  \"location\": \"Berlin\",\r\n  \"skills_used\": [\r\n    1\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{LOCAL_URL}}experiences/",
							"host": [
								"{{LOCAL_URL}}experiences"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "experiences by userid",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{LOCAL_URL}}experiences/?user_id=2",
							"host": [
								"{{LOCAL_URL}}experiences"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "user_id",
									"value": "2"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "fields-of-study",
			"item": [
				{
					"name": "fields-of-study",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "fields-of-study",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{$randomJobArea}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{LOCAL_URL}}qualifications/fields-of-study/",
							"host": [
								"{{LOCAL_URL}}qualifications"
							],
							"path": [
								"fields-of-study",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "degree",
			"item": [
				{
					"name": "degree",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{LOCAL_URL}}qualifications/degrees/",
							"host": [
								"{{LOCAL_URL}}qualifications"
							],
							"path": [
								"degrees",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "degree",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const degree = [\r",
									"  \"Associate of Arts (AA)\",\r",
									"  \"Associate of Science (AS)\",\r",
									"  \"Associate of Applied Science (AAS)\",\r",
									"  \"Bachelor of Arts (BA)\",\r",
									"  \"Bachelor of Science (BS)\",\r",
									"  \"Bachelor of Fine Arts (BFA)\",\r",
									"  \"Bachelor of Business Administration (BBA)\",\r",
									"  \"Master of Arts (MA)\",\r",
									"  \"Master of Science (MS)\",\r",
									"  \"Master of Business Administration (MBA)\",\r",
									"  \"Master of Fine Arts (MFA)\",\r",
									"  \"Doctor of Philosophy (PhD)\",\r",
									"  \"Doctor of Education (EdD)\",\r",
									"  \"Doctor of Business Administration (DBA)\",\r",
									"  \"Juris Doctor (JD)\",\r",
									"  \"Doctor of Medicine (MD)\",\r",
									"  \"Doctor of Dental Surgery (DDS)\"\r",
									"];\r",
									"\r",
									"function getRandomDegree() {\r",
									"    const randomIndex = Math.floor(Math.random() * degree.length);\r",
									"    return degree[randomIndex];\r",
									"}\r",
									"\r",
									"const randomDegree = getRandomDegree();\r",
									"\r",
									"// Set the random language as an environment variable\r",
									"pm.collectionVariables.set(\"randomDegree\", randomDegree);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{randomDegree}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{LOCAL_URL}}qualifications/degrees/",
							"host": [
								"{{LOCAL_URL}}qualifications"
							],
							"path": [
								"degrees",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "qualifications",
			"item": [
				{
					"name": "qualifications",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{LOCAL_URL}}qualifications/",
							"host": [
								"{{LOCAL_URL}}qualifications"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "qualifications",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"institution\": \"{{$randomCompanyName}}\",\r\n  \"start_date\": \"2024-10-21\",\r\n  \"end_date\": \"2024-10-21\",\r\n  \"grade\": \"string\",\r\n  \"description\": \"{{$randomCatchPhraseDescriptor}}\",\r\n  \"user_id\": 1,\r\n  \"degree\": 1,\r\n  \"field_of_study\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{LOCAL_URL}}qualifications/",
							"host": [
								"{{LOCAL_URL}}qualifications"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "language",
			"item": [
				{
					"name": "language",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{LOCAL_URL}}projects/languages/",
							"host": [
								"{{LOCAL_URL}}projects"
							],
							"path": [
								"languages",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "language",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const programmingSpeakingLanguages = [\r",
									"  \"English\",\r",
									"  \"Mandarin Chinese\",\r",
									"  \"Hindi\",\r",
									"  \"Spanish\",\r",
									"  \"French\",\r",
									"  \"Arabic\",\r",
									"  \"Bengali\",\r",
									"  \"Portuguese\",\r",
									"  \"Russian\",\r",
									"  \"Urdu\",\r",
									"  \"Indonesian\",\r",
									"  \"German\",\r",
									"  \"Japanese\",\r",
									"  \"Korean\",\r",
									"  \"Vietnamese\",\r",
									"  \"Turkish\",\r",
									"  \"Tamil\",\r",
									"  \"Italian\",\r",
									"  \"Persian\",\r",
									"  \"Thai\"\r",
									"];\r",
									"\r",
									"function getRandomSpeakingLanguages() {\r",
									"    const randomIndex = Math.floor(Math.random() * programmingSpeakingLanguages.length);\r",
									"    return programmingSpeakingLanguages[randomIndex];\r",
									"}\r",
									"\r",
									"const randomSpeakingLanguages = getRandomSpeakingLanguages();\r",
									"\r",
									"// Set the random language as an environment variable\r",
									"pm.collectionVariables.set(\"randomSpeakingLanguages\", randomSpeakingLanguages);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{randomSpeakingLanguages}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{LOCAL_URL}}projects/languages/",
							"host": [
								"{{LOCAL_URL}}projects"
							],
							"path": [
								"languages",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "language Copy",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{LOCAL_URL}}projects/languages/1",
							"host": [
								"{{LOCAL_URL}}projects"
							],
							"path": [
								"languages",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "project-languages",
			"item": [
				{
					"name": "project-languages",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{LOCAL_URL}}projects/project-languages/",
							"host": [
								"{{LOCAL_URL}}projects"
							],
							"path": [
								"project-languages",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "project-languages",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"project\": 0,\r\n  \"language\": 1,\r\n  \"skill_level\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{LOCAL_URL}}projects/project-languages/",
							"host": [
								"{{LOCAL_URL}}projects"
							],
							"path": [
								"project-languages",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "project",
			"item": [
				{
					"name": "projects",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{LOCAL_URL}}projects/",
							"host": [
								"{{LOCAL_URL}}projects"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "projects",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"project_name\": \"{{$randomProduct}}-{{$randomProductMaterial}}\",\r\n  \"description\": \"{{$randomProduct}}-{{$randomProductMaterial}} {{$randomJobDescriptor}}\",\r\n  \"start_date\": \"2024-10-21\",\r\n  \"end_date\": \"2025-10-21\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{LOCAL_URL}}projects/",
							"host": [
								"{{LOCAL_URL}}projects"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "project-roles",
			"item": [
				{
					"name": "project-roles",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{LOCAL_URL}}projects/project-roles/",
							"host": [
								"{{LOCAL_URL}}projects"
							],
							"path": [
								"project-roles",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "project-roles",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"project\": 1,\r\n  \"role_name\": \"{{$randomJobTitle}}\",\r\n  \"description\": \"{{$randomJobDescriptor}}\",\r\n  \"experience_range\": 2\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{LOCAL_URL}}projects/project-roles/",
							"host": [
								"{{LOCAL_URL}}projects"
							],
							"path": [
								"project-roles",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "project-skill",
			"item": [
				{
					"name": "project-skills",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{LOCAL_URL}}projects/project-skills/",
							"host": [
								"{{LOCAL_URL}}projects"
							],
							"path": [
								"project-skills",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "project-skills",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"project_role\": 3,\r\n  \"skill\": 3,\r\n  \"skill_level\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{LOCAL_URL}}projects/project-skills/",
							"host": [
								"{{LOCAL_URL}}projects"
							],
							"path": [
								"project-skills",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "jwt create",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const {access, refresh} = JSON.parse(responseBody);\r",
							"if (access) {\r",
							"    pm.collectionVariables.set(\"TOKEN\", access); // This will set the collection variable TOKEN\r",
							"    pm.collectionVariables.set(\"REFRESH_TOKEN\", refresh); // This will set the collection variable REFRESH_TOKEN\r",
							"}\r",
							"\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - refresh and access\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('refresh');\r",
							"    pm.expect(responseData).to.have.property('access');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Refresh and access are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.refresh).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Refresh should not be empty\");\r",
							"    pm.expect(responseData.access).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Access should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"admin@admin.com\",\r\n  \"password\": \"123456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{LOCAL_URL}}users/token/create",
					"host": [
						"{{LOCAL_URL}}users"
					],
					"path": [
						"token",
						"create"
					]
				},
				"description": "### Create Token\n\nThis endpoint is used to create a new token for authentication.\n\n#### Request Body\n\n- `email` (string, required): The email of the user.\n    \n- `password` (string, required): The password of the user.\n    \n\n#### Response\n\nUpon successful execution, the server responds with a status code of 200 and a JSON object containing:\n\n- `refresh` (string): The refresh token for authentication.\n    \n- `access` (string): The access token for authentication."
			},
			"response": []
		},
		{
			"name": "refresh_token",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"refresh\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTcyOTU4NTMzOCwiaWF0IjoxNzI5NDk4OTM4LCJqdGkiOiI3MWE1ZmMwMTA2MjI0ZDAzODM0MTkwMWU5NmJjMDJiYiIsInVzZXJfaWQiOjQxfQ.4wPpLbzKjcvA78GgPIl_XJZBPd-dFH2l52PcuLfHbpQ\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{LOCAL_URL}}users/token/refresh/",
					"host": [
						"{{LOCAL_URL}}users"
					],
					"path": [
						"token",
						"refresh",
						""
					]
				}
			},
			"response": []
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{TOKEN}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "TOKEN",
			"value": "",
			"type": "string"
		},
		{
			"key": "REFRESH_TOKEN",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomLanguage",
			"value": "",
			"type": "string"
		},
		{
			"key": "LOCAL_URL",
			"value": "",
			"type": "string"
		},
		{
			"key": "randomCategories",
			"value": ""
		},
		{
			"key": "randomDegree",
			"value": ""
		},
		{
			"key": "randomSpeakingLanguages",
			"value": ""
		}
	]
}